# -*- coding: utf-8 -*-
"""
Association rules - FP-growth

Created on Tue Jan  3 20:46:10 2017

@author: Pablo

http://orange3-associate.readthedocs.io/en/latest/scripting.html
"""

#import orangecontrib.associate.fpgrowth as ofpg
#import Orange
#
#T = [[1, 3, 4], [2, 3, 5], [1, 2, 3, 5], [2, 5]]
#itemsets = ofpg.frequent_itemsets(T, 2)
#
#data = Orange.data.Table('zoo')
#X, mapping = ofpg.OneHot.encode(data, include_class=True)
#
#itemsets = dict(ofpg.frequent_itemsets(X, .4))
#
#class_items = {item 
#               for item, var, _ in ofpg.OneHot.decode(mapping, data, mapping) 
#               if var is data.domain.class_var
#              }
#
#rules = [(P, Q, supp, conf)
#          for P, Q, supp, conf in ofpg.association_rules(itemsets, .8)
#          if len(Q) == 1 and Q & class_items]
#
#names = {item: '{}={}'.format(var.name, val)
#          for item, var, val in ofpg.OneHot.decode(mapping, data, mapping)}
#
#for ante, cons, supp, conf in rules[:5]:
#     print(', '.join(names[i] for i in ante), '-->',
#           names[next(iter(cons))],
#           '(supp: {}, conf: {})'.format(supp, conf))




#Have a database of 50 transactions, 100 possible items:

import numpy as np
import orangecontrib.associate.fpgrowth as ofpg
from scipy.sparse import lil_matrix  # other types would convert to LIL anyway

np.random.seed(0)
X = np.random.random((50, 100)) > .9

# Convert it to sparse so we show this type is supported:
X = lil_matrix(X)

# Count the number of itemsets of at least two items with support greater than 4%:
num_items = sum(1 for itemset, support in ofpg.frequent_itemsets(X, .05)
     if len(itemset) >= 2)
print('number of itemsets of at least two items with support greater than 4%:', num_items)

# Let’s get all the itemsets with at least 20% support:
gen = ofpg.frequent_itemsets(X, .2)
itemsets = list(gen)

# We get the same result by specifying the support as absolute number:
print(list(ofpg.frequent_itemsets(X, 10)) == itemsets)

# So the items ‘4’ and ‘25’ (fifth and twenty sixth columns of X) are the only items (and itemsets) that appear 10 or more times. Let’s check this:
print((X.sum(axis=0) >= 10).nonzero()[1])

# Conclusion: Given databases of uniformly distributed random data, there’s not much to work with.




# Examples with rules
np.random.seed(0)
N = 100
X = np.random.random((N, 100)) > .9

# Find all itemsets with at least 5% support:
itemsets = dict(ofpg.frequent_itemsets(X, .05))

# Generate all association rules from these itemsets with minimum 50% confidence:
rules = ofpg.association_rules(itemsets, .5)
rules = list(rules)

# Or only the rules for a particular itemset:
print(list(ofpg.association_rules(itemsets, .3, frozenset({75, 98}))))


# Examples of additional stats for rules generated by association_rules()
N = 30
X = np.random.random((N, 50)) > .9
itemsets = dict(ofpg.frequent_itemsets(X, .1))
rules = ofpg.association_rules(itemsets, .6)
print(list(ofpg.rules_stats(rules, itemsets, N)))
